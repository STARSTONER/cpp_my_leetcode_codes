/* using recurison and memoisation accepted solution, was giving T.L.E without
memoisation */

class Solution {
public:
int t[366];
     int solve(vector<int>&days, vector<int>&costs,int n,int i){
        if(i>=n){
            return 0;// we cant travel anymore so cost
        }

        if(t[i]!=-1){
            return t[i];
        }
            //1_day pass
            int cost_1=costs[0]+solve(days,costs,n,i+1);

            // 2day pass
            int j=i;
            int max_day=days[i]+7;
            while(j<n&& days[j]<max_day){
                j++;
            }
            int cost_7=costs[1]+solve(days,costs,n,j);

            //30_days pass
            j=i;
             max_day=days[i]+30;
             while(j<n&& days[j]<max_day){
                j++;
             }

             int cost_30=costs[2]+solve(days,costs,n,j);

             return t[i]=min({cost_1,cost_7,cost_30});
 
     }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n= days.size();

        memset(t,-1,sizeof(t));
        return solve(days, costs,n,0);
    }
};


/* approach 2 using bottom up dp*/

class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        unordered_set<int> st(begin(days),end(days));
        int last_day=days.back();
        vector<int> t(last_day+1,0);
        t[0]=0;
        for(int i=1;i<=last_day;i++){
            //chcek if you hace to travel on ith day or not 
            if(st.find(i)==st.end()){
                t[i]=t[i-1];
                continue;

            }
            t[i]=INT_MAX;
            int day_1_pass=costs[0]+t[max(i-1,0)];

            int day_7_pass=costs[1]+t[max(i-7,0)];
            int day_30_pass=costs[2]+t[(max(i-30,0))];/*// here using max() inside the [] to avoid integer overflow is a very good solution instead of using a if, else for evey condition check*/
// need to remember this simple tip//

            t[i]=min({day_1_pass,day_7_pass,day_30_pass});

        }

        return t[last_day];
    }
};




/* appraoch 4: The One Pass (may be we can conclude the appraoch 2 and 3 as same and just follow-up optimisations; 
but this apraoch is the most intutive and easiest appraoch to solve we get the equation Zl+Or=Score from equation which we need to maximise where Zl is the total zeroes to the left of the index and similarly
the Or and we also knwo that Ototal=Ol+Or whihc upon replacing in the equation prior we get Zl+Ototal-Ol and transposing the terms we get (Zl-Ol)+Ototal;
so we can just try to maximise the Zl-Ol (which we get just by pasing through the string only once ) ,we keep on counting the number of ones and zeroes as we start moving
to the left of the string and then just calculate the maximum value we can get of Zl-Ol atlast we add the total numebr of ones to the optimum Zl-Ol value
which we get while parsing the string itself
*/


class Solution {
public:
    int maxScore(string s) {
        int count_ones=0;
        int count_zeroes=0;
        int score=INT_MIN;

        for(int i=0;i<s.length()-1;i++){
            
            if(s[i]=='0')
            count_zeroes++;
            else
            count_ones++;

            score=max(score,count_zeroes-count_ones);
        }
        if(s[s.length()-1]=='1'){
// since we are not parsing till the end of the strign to avoid getting the empty string , hence we check if there 
//are any ones remaing after the end of the loop and add them to the ones count;
            count_ones++;
        }

        return score+count_ones;
    }
};

