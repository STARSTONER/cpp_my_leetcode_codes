/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int countMinswapstosort(vector<int>& vec){
        int swaps=0;
        vector<int> sv(begin(vec),end(vec));
        sort(begin(sv),end(sv));

        unordered_map<int,int>mp;//nums[i]->i
        for(int i=0;i<vec.size();i++){
            mp[vec[i]]=i;



        }
        for(int i=0;i<vec.size();i++){
            if(vec[i]==sv[i]){
                continue;// then no swap required;
            }
            int curridx=mp[sv[i]];
            mp[vec[i]]=curridx;
            swap(vec[curridx],vec[i]);
            swaps++;
        }
        return swaps;

    }


    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> que;
        que.push(root);

        int res=0;
        while(!que.empty()){
            int n=que.size();//total nodes in current level
            vector<int>vec;
            

            while(n--){
                TreeNode* temp=que.front();
                que.pop();
                vec.push_back(temp->val);

                if(temp->left){
                    que.push(temp->left);
                }

                if(temp->right){
                    que.push(temp->right);
                }

            }
            res+=countMinswapstosort(vec);

        }

        
return res;
        
    }
};
