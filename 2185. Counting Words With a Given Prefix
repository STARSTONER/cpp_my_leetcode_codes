//most important approach 3 using trie; we genearally think of trie when there is somthing realted to prefix or sufix in the question

//appraoch 1:using find function
class Solution {
public:
    int prefixCount(vector<string>& words, string pref) {
        int count=0;
        for(int i=0;i<words.size();i++){
            if(words[i].find(pref)==0){
                count++;
            }
        }
        return count;
        
    }
};



//approach 2: using substr function:
class Solution {
public:
    int prefixCount(vector<string>& words, string pref) {
        int count=0;
        for(string &word:words){
            if(word.substr(0,pref.length())==pref){
                count++;
            }
        }
        
        return count;
        
    }
};


//appraoch 3: using trie:

struct TrieNode{
    TrieNode*children[26];
    bool isEndofWord;
    int count;
};

TrieNode * getnode(){
    TrieNode*newNode=new TrieNode();
    newNode->isEndofWord=false;
    newNode->count=0;
    for(int i=0;i<26;i++){
        newNode->children[i]=NULL;
    }
    return newNode;


};

class Trie{

    public:
        TrieNode* root;

        Trie(){
            root= getnode();

        }

        void insert(string &word){
            TrieNode*pcrawl=root;
            for(char &ch:word){
                int idx=ch-'a';
                if(pcrawl->children[idx]==NULL){
                    pcrawl->children[idx]=getnode();


                }
                pcrawl=pcrawl->children[idx];
                pcrawl->count++;//count increased for prefix at this character

            }
            pcrawl->isEndofWord=true;

        }

int searchprefixcount(string &pref){
    TrieNode*pcrawl=root;
    for(char & ch:pref){
        int idx=ch-'a';
        if(pcrawl->children[idx]==NULL){
            return 0;
        }
        pcrawl=pcrawl->children[idx];
    }
    return pcrawl->count;

}


};




class Solution {
public:
    int prefixCount(vector<string>& words, string pref) {


Trie trie;
for(string &word:words){
    trie.insert(word);
}
return trie.searchprefixcount(pref);



         }
};


