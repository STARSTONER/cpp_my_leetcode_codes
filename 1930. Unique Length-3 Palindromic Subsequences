//appraoch 1: time complexiety=O(26*n)=O(n); space complexiety=O(26)=O(1)

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n=s.length();

        unordered_set<char>letters;
        for(int i=0;i<n;i++){
            letters.insert(s[i]);
        }
        int res=0;
        for( char letter :letters){
            int left_idx=-1;
            int right_idx=-1;

            for(int i=0;i<n;i++){
                if(s[i]==letter){
                    if(left_idx==-1){
                        left_idx=i;
                    }
                    right_idx=i;
                }


            }
            unordered_set<char>st;
            for(int middle_idx=left_idx+1;middle_idx<=right_idx-1;middle_idx++){
                st.insert(s[middle_idx]);

            }
            res+=st.size();


        }

        return res;
        
    }
};



//same appraoch but small changes in solving: using pre-computation of the left_most index and right_most index
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n=s.length();

        vector<pair<int,int>>indices(26,{-1,-1});
        for(int i=0;i<n;i++){
            char ch=s[i];
            int idx=ch-'a';//a=0,b=1,.,.,,,.,.

            if(indices[idx].first==-1){
                indices[idx].first=i;


            }
            indices[idx].second=i;


        }
    


        int res=0;
        for( int i=0;i<26;i++){

            
            int left_idx=indices[i].first;
            int right_idx=indices[i].second;

            if(left_idx==-1){
                continue;
            }

            unordered_set<char>st;
            for(int middle_idx=left_idx+1;middle_idx<=right_idx-1;middle_idx++){
                st.insert(s[middle_idx]);

            }
            res+=st.size();


        }

        return res;
        
    }
};

//space complexiety=O(26)=O(1)
//time complexiety=O(n)





