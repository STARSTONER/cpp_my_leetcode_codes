//appraoch 1: time complexiety=O(26*n)=O(n); space complexiety=O(26)=O(1)

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n=s.length();

        unordered_set<char>letters;
        for(int i=0;i<n;i++){
            letters.insert(s[i]);
        }
        int res=0;
        for( char letter :letters){
            int left_idx=-1;
            int right_idx=-1;

            for(int i=0;i<n;i++){
                if(s[i]==letter){
                    if(left_idx==-1){
                        left_idx=i;
                    }
                    right_idx=i;
                }


            }
            unordered_set<char>st;
            for(int middle_idx=left_idx+1;middle_idx<=right_idx-1;middle_idx++){
                st.insert(s[middle_idx]);

            }
            res+=st.size();


        }

        return res;
        
    }
};



//same appraoch but small changes in solving:


