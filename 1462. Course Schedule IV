appraoch 1: using dfs:
class Solution {
public:
    bool dfs(unordered_map<int,vector<int>>&adj, int src, int des, vector<bool>&visited ){
        visited[src]=true;

        if(src==des){
            return true;
        }
        bool reachable=false;
        for(auto& adjnode:adj[src]){
            if(!visited[adjnode]){
                reachable=reachable||dfs(adj, adjnode, des, visited);

            }
        }

        return reachable;
    }




    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {

        unordered_map<int, vector<int>> adj;

        for(auto&edge:prerequisites){
            int u= edge[0];
            int v=edge[1];

            adj[u].push_back(v);

        }
        int q=queries.size();

        vector<bool>res(q);

        for(int i=0;i<q;i++){
            int u=queries[i][0];
            int v=queries[i][1];

            vector<bool>visited(numCourses, false);
            res[i]=dfs(adj, u,v, visited);

        }
return res;
        
    }
};





approach 2: preprocessing the graph into 2d array:
class Solution {
public:
    bool dfs(unordered_map<int,vector<int>>&adj, int src, int des, vector<bool>&visited ){
        visited[src]=true;

        if(src==des){
            return true;
        }
        bool reachable=false;
        for(auto& adjnode:adj[src]){
            if(!visited[adjnode]){
                reachable=reachable||dfs(adj, adjnode, des, visited);

            }
        }

        return reachable;
    }


void preprocess(int n, unordered_map<int, vector<int>>&adj, vector<vector<bool>>&grid){
    for(int u=0;u<n;u++){
        for(int v=0;v<n;v++){
            if(u!=v){
                vector<bool> visited(n, false);
                if(dfs(adj, u, v, visited)==true)
                {
                    grid[u][v]=true;
                }

            }
        }
    }

}



    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {

        unordered_map<int, vector<int>> adj;

        for(auto&edge:prerequisites){
            int u= edge[0];
            int v=edge[1];

            adj[u].push_back(v);

        }

        vector<vector<bool>> grid(numCourses, vector<bool>(numCourses, false));

        preprocess(numCourses, adj,grid );


        int q=queries.size();

        vector<bool>res(q);

        for(int i=0;i<q;i++){
            int u=queries[i][0];
            int v=queries[i][1];
            
            res[i]=grid[u][v];

        }
return res;
        
    }
};









//approach 3: using khans algorithm and topological sort:

class Solution {
public:
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        

        unordered_map<int,vector<int>> adj;

        vector<int>indegree(numCourses, 0);

        for(auto &edge: prerequisites){
            int u=edge[0];
            int v=edge[1];

            adj[u].push_back(v);
            indegree[v]++;
        }

        queue<int> q;
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.push(i);

            }
        }
        unordered_map<int, unordered_set<int>>mp;
        while(!q.empty()){
            int node=q.front();
            q.pop();

            for(auto &ngbr:adj[node]){
                mp[ngbr].insert(node);
                for(auto & preq:mp[node]){
                    mp[ngbr].insert(preq);

                }
                indegree[ngbr]--;
                if(indegree[ngbr]==0){
                    q.push(ngbr);
                }
            }
        }

        int que=queries.size();
        vector<bool> res(que, false);

        for(int i=0;i<que;i++){
            int src=queries[i][0];
            int dest=queries[i][1];

            bool reachable=mp[dest].contains(src);
            res[i]=reachable;

        }
return res;

    }
};
