//appraoch 3: using dfs:
class Solution {
public:
    int m,n;
    vector<vector<int>>dir={{-1,0},{1,0},{0,-1},{0,1}};

    int dfs(int i, int j, vector<vector<int>>&grid){
        if(i<0||i>=m||j<0||j>=n||grid[i][j]==0)
        return 0;

        int fishcount=grid[i][j];
        grid[i][j]=0;// fisherman took all the fishes from this grid
        for(vector<int>&d: dir){
            int i_=i+d[0];
            int j_=j+d[1];
            fishcount+=dfs(i_,j_, grid);

        }
        return fishcount;

    }








    int findMaxFish(vector<vector<int>>& grid) {
        m=grid.size();
        n=grid[0].size();
        int maxfish=0;


        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    maxfish=max(maxfish, dfs(i,j, grid));
                }

                
            }
        }
        return maxfish;
        
    }
};









//appraoch 2: using bfs
class Solution {
public:
    int m,n;
    vector<vector<int>>dir={{-1,0},{1,0},{0,-1},{0,1}};

    int bfs(int i, int j, vector<vector<int>>&grid){
        queue<pair<int,int>>q;
        q.push({i,j});
        int fishcount=grid[i][j];
        grid[i][j]=0;
        while(!q.empty()){
            i=q.front().first;
            j=q.front().second;
            q.pop();

            for(auto &d:dir){
                int i_=d[0]+i;
                int j_=d[1]+j;

                if(i_>=0 && j_>=0&&i_<m && j_<n && grid[i_][j_]>0){
                    q.push({i_,j_});
                    fishcount+=grid[i_][j_];
                    grid[i_][j_]=0;
                }
            }

        }
        return fishcount;

    }








    int findMaxFish(vector<vector<int>>& grid) {
        m=grid.size();
        n=grid[0].size();
        int maxfish=0;


        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    maxfish=max(maxfish, bfs(i,j, grid));
                }

                
            }
        }
        return maxfish;
        
    }
};







// appraoch 3: using dsu concept:
class dsu{
    vector<int> parent;
    vector<int> size;

    public:
    dsu(int n){
        parent.resize(n);
        size.resize(n);

        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=0;

        }
    }
    int find(int x){
        if(parent[x]==x){
            return x;

        }
        return parent[x]=find(parent[x]);

    }
    void Union(int x, int y){
        int x_parent=find(x);
        int y_parent=find(y);

        if(x_parent==y_parent){
            return;
        }
        if(size[x_parent]>size[y_parent]){
            parent[y_parent]=x_parent;
            size[x_parent]+=size[y_parent];
        }
        else{
            parent[x_parent]=y_parent;
            size[y_parent]+=size[x_parent];
        }
    }
    void setsize(int idx, int fishcount){
        size[idx]=fishcount;
    }

    int getmaxcount(){
        return *max_element(begin(size), end(size));
    }


};



class Solution {
public:
    int findMaxFish(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        
        vector<vector<int>> dir={{-1,0},{1,0},{0,-1},{0,1}};

        int totalcells=m*n;

        dsu dsu_(totalcells);

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    int idx=i*n+j;
                    dsu_.setsize(idx, grid[i][j]);
                    
                }
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    int idx=i*n+j;
                    for(auto &d: dir){
                        int i_=i+d[0];
                        int j_=j+d[1];

                        if(i_>=0&&j_>=0&&i_<m&&j_<n&&grid[i_][j_]>0)
                        {
                        int idx_=i_*n+j_;
                        
                        dsu_.Union(idx, idx_);
                        }
                    }
                }
            }

        }
        return dsu_.getmaxcount();
        
    }
};
