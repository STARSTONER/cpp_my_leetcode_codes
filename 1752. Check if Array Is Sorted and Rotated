//appraoch 1: novice bruteforce:
class Solution {
public:
    bool check(vector<int>& nums) {
     int n=nums.size();
     vector<int> sorted(n)  ;
     for(int r=0;r<n;r++){
        int idx=0;
        for(int i=r;i<n;i++){
            sorted[idx]=nums[i];
            idx++;
        }

        for(int i=0;i<r;i++){
            sorted[idx]=nums[i];
            idx++;

        }
        bool issorted=true;
        for(int i=0;i<n-1;i++){
            if(sorted[i]>sorted[i+1]){
                issorted=false;
                break;
            }
        }
        if(issorted){
            return true;
        }

     }


return false;

    }
};




//appraoch 2: bettter bruteforce:

class Solution {
public:
    bool check(vector<int>& nums) {
        int n=nums.size();
        vector<int>sorted=nums;

        sort(begin(sorted), end(sorted));

        for(int r=0;r<n;r++){
          bool issorted=true;
            for(int i=0;i<n;i++){
            
            if(sorted[i]!=nums[(i+r)%n]){
                issorted=false;
                break;
            }

            }
            if(issorted){
                return true;
            }
        }

        return false;
        
    }
};



//approach 3: optimal approach:

class Solution {
public:
    bool check(vector<int>& nums) {
        int n=nums.size();
       int peak=0;
       for(int i=0;i<n;i++){
        if(nums[i]>nums[(i+1)%n]){
            peak++;
        }
       }
        

        return peak<=1;
        
    }
};















