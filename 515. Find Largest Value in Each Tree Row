
/* solution 1
by simply doing a bfs row traversal and finding the max in ech row and updating it in the 
result vetor to be returned.
*/

class Solution {
public:
    vector<int> largestValues(TreeNode* root) {

        if(root==NULL){// if intial root itself is NULL return the empty vector
            return {};

        }

        vector<int>res;

        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            int n=q.size();
            int maEl=INT_MIN;
            while(n--){
                TreeNode* node=q.front();
                q.pop();

                maEl=max(maEl,node->val);

                if(node->left) q.push(node->left);

                
                if(node->right) q.push(node->right);


            }
            res.push_back(maEl);

        }
        return res;

        
    }
};




/* solution 2
if follow up question is to solve the question using dfs only 
*/

class Solution {
public:
vector<int>res;

    void dfs(TreeNode*root, int depth){
        if(root==NULL){
            return;
        }
        if(depth==res.size()){// it means that this is the first time we are visiting this depth,
//so for now we can initialise the res vector with that element and later when we encounter an elemente greater than the current we will update it
            res.push_back(root->val);
        }
        else{
            res[depth]=max(res[depth],root->val);// it means that we have already visited the depth, which mean there is already an element 
//at that place, so we need to update it with the maximum element possible till now
        }

        dfs(root->left,depth+1);
        dfs(root->right,depth+1);




    }
    vector<int> largestValues(TreeNode* root) {
        dfs(root,0);

        return res;
    }
};

