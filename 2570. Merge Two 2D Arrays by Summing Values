//apraoch 1: using unordered_map and sorting or using a ordered map directly to store the elemetns in order 
//both take a time complexiety of o(nlogn);

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        int m=nums1.size();
        int n=nums2.size();

        unordered_map<int,int> mp;
        vector<vector<int>> res;

        for(int i=0;i<m;i++)
        {
            int id=nums1[i][0];
            int val=nums1[i][1];

            mp[id]+=val;
        }

        for(int j=0;j<n;j++)
        {
            int id=nums2[j][0];
            int val=nums2[j][1];

            mp[id]+=val;
        }


        for(auto&it:mp)
        {
            int key=it.first;
            int val=it.second;

            res.push_back({key, val});
        }
        sort(begin(res), end(res));
        return res;
    }
};








//the solution to this problem is similar to the seconds part or the merging part of the merge sort alogithm, 
//except for it is just a 2d array rest is the complete same, have two pointer with two arrays andd go on

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) 
    {
        int i=0,j=0;
        int m=nums1.size();
        int n=nums2.size();
        vector<vector<int>>v;



//[[1,3],[2,4],[3,6],[4,3]]

//j=0, 1          i=1,2
        while(i<m&&j<n)
        {
            if(nums1[i][0]==nums2[j][0])
            {
                v.push_back({nums1[i][0],nums1[i][1]+nums2[j][1]});
                i++;
                j++;

            }
            else if(nums1[i][0]<nums2[j][0])
            {
                v.push_back({nums1[i][0],nums1[i][1]});
                i++;
            }
            else
            {
                v.push_back({nums2[j][0],nums2[j][1]});
                j++;
            }
            
        }
        while(i<m)
        {
            v.push_back({nums1[i][0],nums1[i][1]});
                i++;

        }

        while(j<n){
            v.push_back({nums2[j][0],nums2[j][1]});
                j++;
        }

        return v;
    }
};
