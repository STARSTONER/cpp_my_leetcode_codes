//appraoch 1: using dfs:

class Solution {
public:
int a_income;
unordered_map<int,vector<int>>adj;
unordered_map<int,int>bobMap;


bool dfsBob(int curr,int t,vector<bool>&visited)
{
    visited[curr]=true;
    bobMap[curr]=t;

    if(curr==0)
    {
        return true;
    }

    for(auto &ngbr:adj[curr])
    {
        if(!visited[ngbr])
        {
            if(dfsBob(ngbr,t+1,visited)==true)
            {
                return true;
            }
        }
    }
    bobMap.erase(curr);
    return false;

}

void dfsAlice(int curr, int t, int income,vector<bool>&visited, vector<int>&amount)
{
    visited[curr]=true;
    if(bobMap.find(curr)==bobMap.end()||t<bobMap[curr])
    {
        income+=amount[curr];

    }
    else if(t==bobMap[curr])
    {
        income+=amount[curr]/2;
    }

    if(adj[curr].size()==1 && curr!=0)
    {
          a_income=max(a_income,income);
    }

    for(int &ngbr:adj[curr])
    {
        if(!visited[ngbr])
        {
            dfsAlice(ngbr,t+1,income,visited,amount);
        }
    }


}



    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) 
    {
        int n=amount.size();

        a_income=INT_MIN;

        for(vector<int>&edge:edges)
        {
            int u=edge[0];
            int v=edge[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int time=0;
        vector<bool>visited(n,false);
        dfsBob(bob,time,visited);

        int income=0;
        visited.assign(n,false);
        dfsAlice(0,0,income,visited,amount);
        
        return a_income;
    }
};






//appraoch 2: using bfs:
//----------------------------

class Solution {
public:
int a_income;
unordered_map<int,vector<int>>adj;
unordered_map<int,int>bobMap;


bool dfsBob(int curr,int t,vector<bool>&visited)
{
    visited[curr]=true;
    bobMap[curr]=t;

    if(curr==0)
    {
        return true;
    }

    for(auto &ngbr:adj[curr])
    {
        if(!visited[ngbr])
        {
            if(dfsBob(ngbr,t+1,visited)==true)
            {
                return true;
            }
        }
    }
    bobMap.erase(curr);
    return false;

}





    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) 
    {
        int n=amount.size();

        a_income=INT_MIN;

        for(vector<int>&edge:edges)
        {
            int u=edge[0];
            int v=edge[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int time=0;
        vector<bool>visited(n,false);
        dfsBob(bob,time,visited);

        int income=0;
        visited.assign(n,false);
        
        queue<vector<int>>q;
        //{node,time,income}
        q.push({0,0,0});
        while(!q.empty())
        {
            int curr=q.front()[0];
            int t=q.front()[1];
            int income=q.front()[2];

            q.pop();
            if(bobMap.find(curr)==bobMap.end()||bobMap[curr]>t)
            {
                income+=amount[curr];

            }
            else if(t==bobMap[curr])
            {
                income+=(amount[curr])/2;
            }

            if(adj[curr].size()==1 && curr!=0){
                a_income=max(a_income,income);
            
            } 

            for(int &ngbr:adj[curr])
            {
                if(!visited[ngbr]){
                    q.push({ngbr,t+1,income});
                }
            }

visited[curr]=true;

        }
        
        return a_income;
    }
};


